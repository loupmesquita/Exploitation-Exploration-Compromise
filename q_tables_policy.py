import numpy as np

class QTablePolicy:
    def __init__(self, num_states, num_actions, learning_rate=0.1, discount_factor=0.9, exploration_rate=0.2):
        self.num_states = num_states
        self.num_actions = num_actions
        self.learning_rate = learning_rate
        self.discount_factor = discount_factor
        self.exploration_rate = exploration_rate

        # Initialize Q-table with zeros
        self.q_table = np.zeros((num_states, num_actions))

    def select_action(self, state):
        # Exploration vs. Exploitation trade-off
        if np.random.rand() < self.exploration_rate:
            # Explore: Choose a random action
            return np.random.choice(self.num_actions)
        else:
            # Exploit: Choose the action with the highest Q-value for the current state
            return np.argmax(self.q_table[state, :])

    def update_q_values(self, state, action, reward, next_state):
        # Q-value update using the Bellman equation
        current_q_value = self.q_table[state, action]
        max_future_q_value = np.max(self.q_table[next_state, :])
        new_q_value = (1 - self.learning_rate) * current_q_value + \
                       self.learning_rate * (reward + self.discount_factor * max_future_q_value)

        # Update the Q-table
        self.q_table[state, action] = new_q_value
