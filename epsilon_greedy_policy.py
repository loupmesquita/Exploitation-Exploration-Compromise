import numpy as np

class EpsilonGreedyPolicy:
    def __init__(self, num_actions, epsilon=0.1):
        self.num_actions = num_actions
        self.epsilon = epsilon
        self.q_values = np.zeros(num_actions)

    def select_action(self, state):
            if np.random.rand() < self.epsilon:
                # Explore: Choose a random action
                return ["left", "right", "none"][np.random.choice(self.num_actions)]
            else:
                # Exploit: Choose the action with the highest Q-value
                return ["left", "right", "none"][np.argmax(self.q_values)]

    def update_q_values(self, state, action, reward, next_state, next_action, alpha=0.1, gamma=0.9):
        # Q-learning update rule
        target = reward + gamma * np.max(self.q_values[next_action])
        error = target - self.q_values[action]
        self.q_values[action] += alpha * error
