from agent import Agent
import numpy as np

class UCB1Policy:
    def __init__(self, num_actions=3):
        self.num_actions = num_actions
        self.total_rewards = np.zeros(num_actions)
        self.num_selected = np.zeros(num_actions)
        self.time_step = 0

    def select_action(self, agent: Agent) -> str:
        self.time_step += 1

        # Ensure all actions are selected at least once
        if 0 in self.num_selected:
            action = np.argmax(self.num_selected == 0)
        else:
            # Calculate UCB1 values for each action
            ucb_values = self.total_rewards / self.num_selected + np.sqrt(2 * np.log(self.time_step) / self.num_selected)

            # Choose action with the highest UCB1 value
            action = np.argmax(ucb_values)

        # Update the number of times the action is selected
        self.num_selected[action] += 1

        return ["left", "right", "none"][action]

    def update_q_values(self, agent: Agent, reward: float):
        # Update total rewards for the selected action
        self.total_rewards[agent.position] += reward
